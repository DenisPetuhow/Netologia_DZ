#include <iostream>
#include <Windows.h>
#include <vector>

// Рекурсивная функция для вычисления n-го числа Фибоначчи
int fibonacci(int m_n, std::vector<int>& m_meno) {
    // Если результат уже вычислен, возвращаем его
    if (m_meno[m_n] != -1)
        return m_meno[m_n];
    // Иначе вычисляем рекурсивно и сохраняем результат в массиве
    m_meno[m_n] = fibonacci(m_n - 1, m_meno) + fibonacci(m_n - 2, m_meno);
    return m_meno[m_n];
}

int main() {
    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);

    int n;
    std::cout << "Введите число: ";
    std::cin >> n;
    std::cout << "Числа Фибоначчи: "; 

    std::vector<int> memo(n + 1, -1);
    // Базовые случаи
    if (n >= 0) memo[0] = 0;
    if (n >= 1) memo[1] = 1;

    // Вычисляем и выводим последовательность Фибоначчи до n-го числа
    std::cout << "Числа Фибоначчи: ";
    for (int i = 0; i < n; ++i) {
        std::cout << fibonacci(i, memo) << " ";
    }
    std::cout << std::endl;
    return 0;
}

// • По скорости : Временная сложность рекурсивного алгоритма O(2 ^ n), так как для вычисления каждого n - го числа происходит много повторённых вычислений(каждый вызов функции порождает два новых вызова, кроме базовых случаев).
// • По памяти : Пространственная сложность O(n), поскольку глубина рекурсии достигает n(максимум n вложенных вызовов функции размещаются в стеке).